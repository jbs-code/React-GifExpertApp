{"version":3,"sources":["Components/AddCategory.js","Components/GifGridItem.js","helpers/getGif.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","value","onChange","target","GifGridItem","title","url","className","src","alt","getGif","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","cat","ReactDOM","render","document","getElementById"],"mappings":"yMAuCeA,EApCK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAEnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAY,SAAAS,GAAC,OAAKP,GAAL,mBAAoBO,OACjCN,EAAc,MAIlB,SACI,uBACIO,MAAOR,EACPS,SAnBa,SAACN,GACtBF,EAAcE,EAAEO,OAAOF,a,QCVhB,SAASG,EAAT,GAAoC,IAAdC,EAAa,EAAbA,MAAOC,EAAM,EAANA,IAExC,OACI,sBAAKC,UAAU,6CAAf,UACI,qBAAKC,IAAOF,EAAKG,IAAOJ,IACxB,4BAAIA,O,2BCNHK,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEZN,EAFY,iDAEoCO,UAAUF,GAF9C,+DAGCG,MAAMR,GAHP,cAGZS,EAHY,gBAIKA,EAAKC,OAJV,uBAIVC,EAJU,EAIVA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAVxB,kBAcXY,GAdW,4CAAH,sDCENM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SACtB,ECKwB,SAACA,GACzB,MAA0BnB,mBAAS,CAC/ByB,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACNlB,EAAOC,GAAUkB,MAAK,SAAAT,GAElBO,EAAS,CACLV,KAAMG,EACNK,SAAS,SAIlB,CAACd,IAEGe,EDtBwBI,CAAanB,GAAhCW,EAAZ,EAAOL,KAAaQ,EAApB,EAAoBA,QAOpB,OACI,qCACI,6BAAKd,IAEJc,GAAW,mBAAGlB,UAAU,oCAAb,wBACZ,sBAAKA,UAAU,WAAf,UACKe,EAAOH,KAAI,SAAAC,GAAG,OAAI,cAAChB,EAAD,eAA8BgB,GAAZA,EAAIC,OAD7C,WEWGU,EAvBM,WAEjB,MAAgCvC,mBAAS,CAAC,SAA1C,mBAAOmB,EAAP,KAAiBpB,EAAjB,KAEA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,YAAaA,IAC1B,uBAGA,6BAEQoB,EAASQ,KAAI,SAAAa,GAAG,OACZ,cAAC,EAAD,CAASrB,SAAUqB,GAAUA,Y,MCdrDC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e0c7b59b.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategory }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');//Es importante dejar una cadena vacía para evitar un undefined que genere errores\r\n\r\n    //Si ponemos el inputValue en el input nos daremos cuenta de que no podemos modificarlo\r\n    //Tenemos que utilizar onChange en el input y llamar, en este caso, handleInputValue\r\n    //que tiene como argumento el evento que recibe onChange cuando queremos modificarlo,\r\n    //y tenemos que buscar el value para así modificar nuestro hook. \r\n    const handleInputValue = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    //Esta función previene que se renderise toda la página cuando hacemos el submit del form\r\n    //específicamente el e.preventDefault() es la que hace esa fucnión.\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        //validación para que no nos deje agregar undefined en el arreglo\r\n        if (inputValue.trim().length > 2) {\r\n            setCategory(c => [inputValue, ...c]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                value={inputValue}\r\n                onChange={handleInputValue} />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategory: PropTypes.func.isRequired\r\n }\r\n\r\nexport default AddCategory;\r\n","import React from 'react'\r\n\r\nexport default function GifGridItem({title, url}) {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInLeft\">\r\n            <img src = {url} alt = {title}></img>\r\n            <p>{title}</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","\r\nexport const getGif = async (category) => {\r\n    //encodeURI hace los cambios necesarios para que nuestro url sea correcto(borra espacios, pone caracteres, etc).\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=aJmRp94OEdhpqgB9ArGarGWIIYLS33n8`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import GifGridItem from \"./GifGridItem\";\r\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    //el useEffect en este caso hace que getGif se ejecute cuando category cambie. \r\n    //Eso lo penemos en el segundo argumento que recibe. useEffect, a diferencia de useState,\r\n    //nos permite manejar estados pero bajo ciertas condiciones que nosotros le digamos.\r\n    //DEJO EL COMENTARIO PERO EL USEEFECT DE ESTE COMPONENTE LO PASE AL useFetchGifs\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__shakeX\">Loading...</p>}{/*Operador ternario simplificado*/}\r\n            <div className='cardGrid'>\r\n                {images.map(img => <GifGridItem key={img.id} {...img} />)} {/*Nota como mandamos img a las props con spread */}\r\n            </div>\r\n        </>\r\n    );\r\n}","//Functional hooks\r\n//Nos sirven para tener componentes más simples en caso\r\n//de que dentro del componente se vean muy complicados,\r\n//entonces es mejor tenerlos aparte.\r\n//Nótese que dentro de nuestros hooks ponemos tener otros useState  y useEffect.\r\nimport { useState } from \"react\";\r\nimport { getGif } from \"../helpers/getGif\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGif(category).then(img => {\r\n\r\n            setState({\r\n                data: img,\r\n                loading: false\r\n            })\r\n\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './Components/AddCategory';\r\nimport { GifGrid } from './Components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [category, setCategory] = useState(['Goku']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n\r\n            <AddCategory setCategory={setCategory}/>\r\n            <hr />\r\n\r\n            {/* <button onClick={handleAdd}>Añadir</button> */}\r\n            <ol>\r\n                {\r\n                    category.map(cat => \r\n                        <GifGrid category={cat} key={cat}/>\r\n                    )\r\n               }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}